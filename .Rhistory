install.packages("shiny")
shiny::runApp('OneDrive/Documents/07. Personal Mastery/Coursera/Current courses/Developing Data Products/Week 01/Examples/example3')
require(rCharts)
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
install_github??
)()
install_github
install_github()
library(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nplot
n1 <- nplot(Freq ~ Hair, group = Eye, type = multiBarChart)
n1 <- nplot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex = Male) )
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex = Male) )
n1$save(fig/n1.html, cdn = TRUE)
n1$save("fig/n1.html", cdn = TRUE)
n1$save("n1.html", cdn = TRUE)
cat("<iframe scr="n1.html" width=100%, height=600></iframe")
nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex = Male) )
cat("<iframe scr="n1.html" width=100%, height=600></iframe")
cat("<iframe src="n1.html" width=100%, height=600></iframe")
cat("<iframe src="n1.html", width=100%, height=600></iframe")
cat("<iframe src='n1.html', width=100%, height=600></iframe")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(rCharts)
library(airquality)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp('Datascience/DevDataProd/quiz 1')
install.packages("usingR")
shiny::runApp('Datascience/DevDataProd/quiz 1')
shiny::runApp('Datascience/DevDataProd/quiz 1')
shiny::runApp('Datascience/DevDataProd/Course Project')
library(xlsx)
library(xlsx)
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
library(devtools)
library(Rtools)
install.packages("Rtools")
devtools:: install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='castor', token='05DFCC1E7B265619DD0C813502CA878C', secret='Od4zcwRn7ZI+PKsdk7Qfob5Wgh/QwAdw8BvNJ6YT')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project')
shiny::runApp('Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj')
shiny::runApp('Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj')
shiny::runApp('Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj')
shiny::runApp('Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj')
library(shinyapps)
shinyapps::deployApp('D:/documents/datascience/devdataprod/course project/Dev_data_prod_course_prj')
library(shinyapps)
shinyapps::deployApp('D:/Documents/Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj')
library(shinyapps)
shinyapps::deployApp('D:/Documents/Datascience/DevDataProd/Course_Project/Dev_Data_Prod_Course_prj')
library(shinyapps)
shinyapps::deployApp("D:/Documents/Datascience/DevDataProd/Course_Project/Dev_Data_Prod_Course_prj")
library(shinyapps)
shinyapps::deployApp("Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj")
library(shinyapps)
shinyapps::deployApp("Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj")
shinyapps::deployApp("D:/My Documents/Datascience/DevDataProd/Course Project/Dev_Data_Prod_Course_prj")
shinyapps::deployApp("D:/Documents/Datascience/DevDataProd/Course Project/")
shinyapps::deployApp("D:/Documents/Datascience/DevDataProd/Course Project")
shinyapps::deployApp("Datascience/DevDataProd/Course Project")
shinyapps::deployApp("./Datascience/DevDataProd/Course Project")
shinyapps::deployApp("./Datascience/DevDataProd")
install.packages("rmarkdown")
shinyapps::deployApp("./Datascience/DevDataProd")
shinyapps::deployApp("./Datascience/DevDataProd")
shinyapps::deployApp("./Datascience/DevDataProd")
shinyapps::deployApp("./Datascience/DevDataProd")
shinyapps::deployApp("./Datascience/Dev_Data_Prod_Course_prj")
shiny::runApp('Datascience/Dev_Data_Prod_Course_prj')
shiny::runApp('Datascience/Dev_Data_Prod_Course_prj')
shinyapps::deployApp("./Datascience/Dev_Data_Prod_Course_prj")
show??
cfads
??show()
?colSums()
?show()
shiny::runApp('Datascience/shiny_example-master')
shiny::runApp('C:/Users/Antonis/Downloads/shiny_example-master')
shiny::runApp('C:/Users/Antonis/Downloads/shiny_example-master')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('C:/Users/Antonis/Downloads/shiny_example-master')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/shinyExamples')
shiny::runApp('Datascience/shinyExamples')
shiny::runApp('Datascience/EV')
shiny::runApp('Datascience/EVapp')
getwd(
)
setwd("./datascience/evapp")
d <- read.xlsx2("data/EV_input2", 1, colClasses = c("numeric","numeric","numeric","numeric"))
d <- read.xlsx2("data/EV_input2.xlsx", 1, colClasses = c("numeric","numeric","numeric","numeric"))
View(d)
View(d)
data <- d
data$SV <- data$EV - data$PV
data$SV <- data$EV - data$AC
data$SV <- data$EV - data$PV
data$CV <- data$EV - data$AC
data$SPI <- data$EV / data$PV
data$CPI <- data$EV / data$AC
data$SCI <- data$SPI * data$CPI
ESm <- data[,1]
for(i in 1:nrow(data)) {
ESm <- cbind(ESm, data$EV[i] - data$PV)
}
PVmax <- max(data$PV)
PD <- sum(data$PV < PVmax)+1
t <- 5
ESc <- ESm[ ,t+1]
EScpos <-  ESc[ESc>0]
C <- as.numeric(length(EScpos))
ESt <- C + (data$EV[t] - data$PV[C])/(data$PV[C+1] - data$PV[C])
SPIt <- ESt/t
SCIt <- SPIt*data$CPI[t]
PF1 <- 1
PF2 <- SPIt
PF3 <- SCIt
EAC1 <- t + (PD - ESt)/PF1
EAC2 <- t + (PD - ESt)/PF2
EAC3 <- t + (PD - ESt)/PF3
nas <- sum(is.na(data))
View(data)
nas <- sum(is.na(data$"ability.cov"))
nas <- sum(is.na(data$AC))
rnum <- nrow(data$AC) - nas
nrow(data$AC)
nrow(data)
rnum <- nrow(data) - nas
d.ac <- data[1:rnum, ]
View(d.ac)
library(ggplot2)
ggplot(d.ac[,2:4])
df1 <- as.data.frame(data$PV)
df1$Time <- seq(1:nrow(df1))
names(df1)[1] <- "Planned Value"
df2 <- as.data.frame(cbind(data$EV[1:t],data$AC[1:t]))
df2$Time <- seq(1:nrow(df2))
names(df2) <- c("Earned Value", "Actual Value")
(plot1 <- ggplot(data[, 1], aes(AC)) +
geom_point() +
geom_line(data = df2)
)
df1 <- as.data.frame(d.ac$PV)
df1$Time <- seq(1:nrow(df1))
names(df1)[1] <- "Planned Value"
df2 <- as.data.frame(cbind(d.ac$EV,data$AC))
df2$Time <- seq(1:nrow(df2))
names(df2) <- c("Earned Value", "Actual Value")
(plot1 <- ggplot(data[, 1], aes(AC)) +
geom_point() +
geom_line(data = df2)
)
data <- read.xlsx2("data/EV_input.xlsx",1, header = TRUE, colClasses= c("numeric","numeric","numeric","numeric"))
df1 <- as.data.frame(data$PV)
df1$Time <- seq(1:nrow(df1))
names(df1)[1] <- "Planned Value"
df2 <- as.data.frame(cbind(data$EV[1:t],data$AC[1:t]))
df2$Time <- seq(1:nrow(df2))
names(df2) <- c("Earned Value", "Actual Value")
(plot1 <- ggplot(data[, 1], aes(AC)) +
geom_point() +
geom_line(data = df2)
)
plotdata <- list(PV = d.ac$PV, AC = d.ac$AC[1:t], EV = d.ac$EV[1:t])
xrange <- range(1:nrow(d.ac))
yrange <- range(0,d.ac$AC,d.ac$PV, d.ac$EV )
plotchar <- c(1,2,3)
colors <- c("red","green","blue")
plot(xrange, yrange, type="n", xlab="Time",
ylab="Value" )
lines(d.ac$PV, type="b", lwd=1.5, pch = plotchar[1],col=colors[1])
lines(d.ac$EV[1:5], type="b", lwd=1.5, pch = plotchar[2],col=colors[2])
lines(d.ac$AC[1:5], type="b", lwd=1.5, pch = plotchar[3],col=colors[3])
legend(xrange[1], yrange[2], c("Planned Value", "Earned Value", "Actual Cost"), cex=0.8, col=colors,
pch=plotchar)
t <- 6
plotdata <- list(PV = d.ac$PV, AC = d.ac$AC[1:t], EV = d.ac$EV[1:t])
xrange <- range(1:nrow(d.ac))
yrange <- range(0,d.ac$AC,d.ac$PV, d.ac$EV )
plotchar <- c(1,2,3)
colors <- c("red","green","blue")
plot(xrange, yrange, type="n", xlab="Time",
ylab="Value" )
lines(d.ac$PV, type="b", lwd=1.5, pch = plotchar[1],col=colors[1])
lines(d.ac$EV[1:5], type="b", lwd=1.5, pch = plotchar[2],col=colors[2])
lines(d.ac$AC[1:5], type="b", lwd=1.5, pch = plotchar[3],col=colors[3])
legend(xrange[1], yrange[2], c("Planned Value", "Earned Value", "Actual Cost"), cex=0.8, col=colors,
pch=plotchar)
plotdata <- list(PV = d.ac$PV, AC = d.ac$AC[1:t], EV = d.ac$EV[1:t])
xrange <- range(1:nrow(d.ac))
yrange <- range(0,d.ac$AC,d.ac$PV, d.ac$EV )
plotchar <- c(1,2,3)
colors <- c("red","green","blue")
plot(xrange, yrange, type="n", xlab="Time",
ylab="Value" )
lines(d.ac$PV, type="b", lwd=1.5, pch = plotchar[1],col=colors[1])
lines(d.ac$EV[1:5], type="b", lwd=1.5, pch = plotchar[2],col=colors[2])
lines(d.ac$AC[1:5], type="b", lwd=1.5, pch = plotchar[3],col=colors[3])
legend(xrange[1], yrange[2], c("Planned Value", "Earned Value", "Actual Cost"), cex=0.8, col=colors,
pch=plotchar)
plot(xrange, yrange, type="n", xlab="Time",
ylab="Value" )
lines(d.ac$PV, type="b", lwd=1.5, pch = plotchar[1],col=colors[1])
lines(d.ac$EV[1:5], type="b", lwd=1.5, pch = plotchar[2],col=colors[2])
lines(d.ac$AC[1:5], type="b", lwd=1.5, pch = plotchar[3],col=colors[3])
plotdata <- list(PV = d.ac$PV, AC = d.ac$AC[1:t], EV = d.ac$EV[1:t])
plotdata
plot(xrange, yrange, type="n", xlab="Time",
ylab="Value" )
lines(d.ac$PV, type="b", lwd=1.5, pch = plotchar[1],col=colors[1])
lines(d.ac$EV[1:t], type="b", lwd=1.5, pch = plotchar[2],col=colors[2])
lines(d.ac$AC[1:t], type="b", lwd=1.5, pch = plotchar[3],col=colors[3])
legend(xrange[1], yrange[2], c("Planned Value", "Earned Value", "Actual Cost"), cex=0.8, col=colors,
pch=plotchar)
